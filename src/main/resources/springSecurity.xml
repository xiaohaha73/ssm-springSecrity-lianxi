<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">


    <!--1. 释放静态资源，不需要security进行拦截-->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>

    <!--设置可以用spring的el表达式配置Spring Security并自动生成对应配置组件（过滤器）-->
    <security:http auto-config="true" use-expressions="true">

        <!--2. 配置让登陆界面放行，不拦截登陆界面-->
        <security:intercept-url pattern="/login.jsp" access="permitAll()"/>

        <!--使用spring的el表达式来指定项目所有资源访问都必须有ROLE_USER或ROLE_ADMIN角色-->
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>

        <!--3. 配置认证信息-->
        <!--
        login-page 配置自定义好的登陆界面
        login-processing-url 这个一般不需要更改
        default-target-url 登陆成功跳转路径
        authentication-failure-url 登陆失败跳转路径
        -->
        <security:form-login login-page="/login.jsp"
                             login-processing-url="/login"
                             default-target-url="/index.jsp"
                             authentication-failure-url="/failer.jsp"/>
        <!--4. 配置退出登陆-->
        <!--
        logout-url 退出登陆路径
        logout-success-url 退出登陆成功跳转路径
        -->
        <security:logout logout-url="/logout"
                         logout-success-url="/login.jsp"/>


        <!--配置记住登陆用户功能-->
        <security:remember-me
                token-validity-seconds="60"
                data-source-ref="dataSource"
                remember-me-parameter="remember-me"/>


<!--        &lt;!&ndash;处理403异常&ndash;&gt;-->
<!--        <security:access-denied-handler error-page="/403.jsp"/>-->




        <!--关闭csrf过滤器-->
<!--        <security:csrf disabled="true"/>-->

    </security:http>

    <!--设置Spring Security认证用户信息的来源-->
<!--    <security:authentication-manager>-->
<!--        <security:authentication-provider>-->
<!--            &lt;!&ndash;这里使用的是内存中的用户，还未开始调用数据库中的用户信息&ndash;&gt;-->
<!--            &lt;!&ndash;{noop}的意思是不加密，去除了这个就会加密&ndash;&gt;-->
<!--            <security:user-service>-->
<!--                <security:user name="user" password="{noop}user"-->
<!--                               authorities="ROLE_USER" />-->
<!--                <security:user name="admin" password="{noop}admin"-->
<!--                               authorities="ROLE_ADMIN" />-->
<!--            </security:user-service>-->
<!--        </security:authentication-provider>-->
<!--    </security:authentication-manager>-->

    <!--配置加密对象-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--将认证的数据来源改为从数据库中获取-->
    <security:authentication-manager>
        <!--user-service-ref就是刚才写好的UserServiceImpl类-->
        <security:authentication-provider user-service-ref="userServiceImpl">
            <!--配置将登陆密码进行加密-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>


</beans>